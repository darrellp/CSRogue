<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SadConsole.Core.Windows</name>
    </assembly>
    <members>
        <member name="T:SadConsole.Algorithms">
            <summary>
            The Bresenham algorithm collection
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            Swaps two references.
            </summary>
            <typeparam name="T">The type being swapped.</typeparam>
            <param name="lhs">Left value.</param>
            <param name="rhs">Right value.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using steep.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line2(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using an interpolation derived algorithm.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.FloodFill``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Func{``0,SadConsole.Algorithms.NodeConnections{``0}})">
            <summary>
            Uses a 4-way fill algorithm to change items from one type to another.
            </summary>
            <typeparam name="TNode">The item type that is changed.</typeparam>
            <param name="node">The item to change.</param>
            <param name="shouldNodeChange">Determines if the node should change.</param>
            <param name="changeNode">After it is determined if the node should change, this changes the node.</param>
            <param name="getNodeConnections">Gets any other nodes connected to this node.</param>
        </member>
        <member name="M:SadConsole.Algorithms.GradientFill(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.ColorGradient,System.Action{System.Int32,System.Int32,Microsoft.Xna.Framework.Color})">
            <summary>
            Processes an area and applies a gradient calculation to each part of the area.
            </summary>
            <param name="position">The center of the gradient.</param>
            <param name="strength">The width of the gradient spread.</param>
            <param name="angle">The angle to apply the gradient.</param>
            <param name="area">The area to calculate.</param>
            <param name="applyAction">The callback called for each part of the area.</param>
        </member>
        <member name="T:SadConsole.Algorithms.NodeConnections`1">
            <summary>
            Describes the 4-way connections of a node.
            </summary>
            <typeparam name="TNode">The type of object the node and its connections are.</typeparam>
        </member>
        <member name="T:SadConsole.Cell">
            <summary>
            Represents an individual glyph on the screen with a foreground, background, and effect.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.Foreground">
            <summary>
            The desired foreground color of this cell. When set, copies the value to ActualForeground.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.Background">
            <summary>
            The desired background color of this cell. When set, copies the value to ActualBackground.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.GlyphIndex">
            <summary>
            The glyph index of the graphic font to print when this cell is drawn. When set, copies the value to <see cref="P:SadConsole.Cell.ActualGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.SpriteEffect">
            <summary>
            The SpriteBatch sprite mirror effect used when rendering the cell. Defaults to None.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.ActualForeground">
            <summary>
            The actual foreground color of this cell when drawing.
            <remarks>The actual foreground may or may not match the desired foreground. When effects are processed, they will normally set this value. If the effect is removed, the actual foreground color is taken from desired foreground color.</remarks>
            </summary>
        </member>
        <member name="P:SadConsole.Cell.ActualBackground">
            <summary>
            The actual background color of this cell when drawing.
            <remarks>The actual background may or may not match the desired background. When effects are processed, they will normally set this value. If the effect is removed, the actual background color is taken from desired background color.</remarks>
            </summary>
        </member>
        <member name="P:SadConsole.Cell.ActualGlyphIndex">
            <summary>
            The actual glyph index of this cell when drawing.
            <remarks>The actual index may or may not match the desired index. When effects are processed, they may change this value. If the effect is removed, the actual index is taken from desired index.</remarks>
            </summary>
        </member>
        <member name="P:SadConsole.Cell.Effect">
            <summary>
            The effect associated with this cell. Processed by the <see cref="T:SadConsole.TextSurface"/> class.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.IsVisible">
            <summary>
            true when this cell will be drawn; otehrwise false.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.Reset">
            <summary>
            Resets this cell with default values.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.ToString">
            <summary>
            Returns a string representing the Actual* property values.
            </summary>
            <returns>A string representing this cell.</returns>
        </member>
        <member name="M:SadConsole.Cell.OnCreated">
            <summary>
            This should be called by anything creating and configuring a cell on the console. Configure the cell (foreground, background, index etc) and then call this.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.Copy(SadConsole.Cell)">
            <summary>
            Copies this cells information to a new cell. Preserves appearance, Actual* properties, and glyph information.
            </summary>
            <param name="destination">The cell to copy to.</param>
        </member>
        <member name="M:SadConsole.Cell.CopyAppearanceTo(SadConsole.ICellAppearance)">
            <summary>
            Applies this appearance instance values to the destination appearance.
            </summary>
            <param name="destination">The target of the appearance copy.</param>
        </member>
        <member name="M:SadConsole.Cell.UpdateAndApplyEffect(System.Double)">
            <summary>
            Updates and applies the <see cref="P:SadConsole.Cell.Effect"/> to this cell. WARNING: Do not use with TextSurface. This should only be called when the cell has a standalone effect that isn't managed by the TextSurface.
            </summary>
        </member>
        <member name="T:SadConsole.CellAppearance">
            <summary>
            Describes the appearance of a cell. This includes the foreground and background colors, and the effect.
            </summary>
        </member>
        <member name="P:SadConsole.CellAppearance.Foreground">
            <summary>
            The foreground color of the cell.
            </summary>
        </member>
        <member name="P:SadConsole.CellAppearance.Background">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="P:SadConsole.CellAppearance.GlyphIndex">
            <summary>
            The glyph index of the cell, used by a font sheet.
            </summary>
        </member>
        <member name="P:SadConsole.CellAppearance.SpriteEffect">
            <summary>
            The SpriteBatch sprite mirror effect used when rendering the cell.
            </summary>
        </member>
        <member name="M:SadConsole.CellAppearance.#ctor">
            <summary>
            Creates a new instance of the cell appearance with a white foreground and transparent background.
            </summary>
        </member>
        <member name="M:SadConsole.CellAppearance.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new instance of the cell appearance with the specified colors and effect.
            </summary>
            <param name="foreground">The foreground color of the cell appearance.</param>
            <param name="background">The background color of the cell appearance.</param>
        </member>
        <member name="M:SadConsole.CellAppearance.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates a new instance of the cell appearance with the specified colors and effect.
            </summary>
            <param name="foreground">The foreground color of the cell appearance.</param>
            <param name="background">The background color of the cell appearance.</param>
            <param name="glyphIndex">The glyph of the cell appearance.</param>
        </member>
        <member name="M:SadConsole.CellAppearance.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a new instance of the cell appearance with the specified colors and effect.
            </summary>
            <param name="foreground">The foreground color of the cell appearance.</param>
            <param name="background">The background color of the cell appearance.</param>
            <param name="glyphIndex">The glyph of the cell appearance.</param>
            <param name="spriteEffect">The sprite mirror effect of the cell appearance.</param>
        </member>
        <member name="M:SadConsole.CellAppearance.CopyAppearanceTo(SadConsole.ICellAppearance)">
            <summary>
            Applies this appearance instance values to the destination appearance.
            </summary>
            <param name="destination">The target of the appearance copy.</param>
        </member>
        <member name="M:SadConsole.CellAppearance.SwapColors">
            <summary>
            Swaps the foreground and background colors.
            </summary>
        </member>
        <member name="M:SadConsole.CellAppearance.Clone">
            <summary>
            Creates a new copy of this cell appearance.
            </summary>
            <returns>The cloned cell appearance.</returns>
        </member>
        <member name="T:SadConsole.ColoredString">
            <summary>
            Represents a string that has foreground and background colors for each character in the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.CustomProcessor">
            <summary>
            Custom processor called if any built in command is not triggerd. Signature is ("command", "sub command", existing glyphs, text surface, associated editor, command stacks).
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.Consoles.ITextSurface,SadConsole.Consoles.SurfaceEditor,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="editor">A surface editor associated with the text surface.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.ColoredString.String">
            <summary>
            Gets or sets the string. When Set, the colors for each character default to the <see cref="!:SadConsole.ColoredString.Foreground"/> and <see cref="!:SadConsole.ColoredString.Background"/> property values.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreGlyph">
            <summary>
            When true, instructs a caller to not render the glyphs of the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreForeground">
            <summary>
            When true, instructs a caller to not render the <see cref="!:Foreground"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreBackground">
            <summary>
            When true, instructs a caller to not render the <see cref="!:Background"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreEffect">
            <summary>
            When true, instructs a caller to not render the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreSpriteEffect">
            <summary>
            When true, instructs a caller to not render the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteEffects"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ColoredString class with the specified blank characters.
            </summary>
            <param name="capacity">The number of blank characters.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value.
            </summary>
            <param name="value">The backing string.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="foreground">The foreground color for each character.</param>
            <param name="background">The background color for each character.</param>
            <param name="spriteEffect">The sprite effects for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadConsole.CellAppearance)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="appearance">The appearance to use for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredGlyph[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredGlyph"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <param name="count">The count of <see cref="T:SadConsole.ColoredGlyph"/> objects to copy.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SetEffect(SadConsole.Effects.ICellEffect)">
            <summary>
            Applies the referenced cell effect to every character in the colored string.
            </summary>
            <param name="effect">The effect to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetForeground(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the referenced color to every character foreground in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetBackground(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the referenced color to every character background in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,SadConsole.ColoredString)">
            <summary>
            Combines two ColoredString objects into a single ColoredString object. Ignore* values are only copied when both strings Ignore* values match.
            </summary>
            <param name="string1">The left-side of the string.</param>
            <param name="string2">The right-side of the string.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.ColoredGlyph">
            <summary>
            Represents a single character that has a foreground and background color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Glyph">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.GlyphIndex">
            <summary>
            Sets the glyph by index.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredGlyph.Effect">
            <summary>
            The effect for the glyph.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor">
            <summary>
            Creates a new colored glyph with a white foreground, transparent background, and a glyph index of 0.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadConsole.Cell)">
            <summary>
            Creates a new colored glyph based on the provided cell.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clone">
            <summary>
            Creates a new copy of this cell appearance.
            </summary>
            <returns>The cloned cell appearance.</returns>
        </member>
        <member name="T:SadConsole.Consoles.AnimatedTextSurface">
            <summary>
            Animates a list of frames.
            </summary>
        </member>
        <member name="E:SadConsole.Consoles.AnimatedTextSurface.AnimationStateChanged">
            <summary>
            Raised when the <see cref="T:SadConsole.Consoles.AnimatedTextSurface.AnimationState"/> changes.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface._addedTime">
            <summary>
            Time counter for the naimation
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface._currentFrameIndex">
            <summary>
            The current frame index being animated.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface._animatedTime">
            <summary>
            The length of the animation
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface._timePerFrame">
            <summary>
            How much time per animated frame should be used.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface._isPlaying">
            <summary>
            Indicates the animation is currently animating.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface._font">
            <summary>
            The font to use with all frames.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.Frames">
            <summary>
            All frames of the animation
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.state">
            <summary>
            The state of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.Center">
            <summary>
            Center of the animation used in positioning.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.Repeat">
            <summary>
            Indicates whether or not this animation will repeat once it has finished animating.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.IsPlaying">
            <summary>
            When true, the <see cref="M:SadConsole.Consoles.AnimatedTextSurface.Update"/> method will advance the frames.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.AnimationDuration">
            <summary>
            The length of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame index to animate.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.IsEmpty">
            <summary>
            Indicates the animation is empty.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.Name">
            <summary>
            Gets the name of this animation.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.CurrentFrame">
            <summary>
            Gets the currently frame being animated.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.AnimatedTextSurface.State">
            <summary>
            Gets the current animation state.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.#ctor(System.String,System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
            <param name="font">The font used with this animation.</param>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.ResetArea">
            <summary>
            Forces the area of this text surface to always be the full width and height.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.UpdateFrameReferences">
            <summary>
            Updates the base <see cref="T:SadConsole.Consoles.TextSurface"/> render references to the current frame.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.CreateFrame">
            <summary>
            Creates a new frame with the same dimensions as this entity and adds it to the Frames collection of the entity.
            </summary>
            <returns>The created frame.</returns>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.CalculateFrameDuration">
            <summary>
            Calculates the time needed per frame for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.Stop">
            <summary>
            Stops animating.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.Start">
            <summary>
            Starts animating the frames.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.Restart">
            <summary>
            Restarts the animation from the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.Update">
            <summary>
            Updates the animation frames based on the time passed since the last call to this method.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.ToString">
            <summary>
            Returns the name of the animation.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="T:SadConsole.Consoles.AnimatedTextSurface.AnimationStateChangedEventArgs">
            <summary>
            Event args for when the animation state changes
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationStateChangedEventArgs.PreviousState">
            <summary>
            The previous state.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationStateChangedEventArgs.NewState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.AnimatedTextSurface.AnimationStateChangedEventArgs.#ctor(SadConsole.Consoles.AnimatedTextSurface.AnimationState,SadConsole.Consoles.AnimatedTextSurface.AnimationState)">
            <summary>
            Creates a new instance of the event args.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:SadConsole.Consoles.AnimatedTextSurface.AnimationState">
            <summary>
            Represents what state the animation is in.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationState.Stopped">
            <summary>
            The animation has never been played or was forcibly stopped.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationState.Restarted">
            <summary>
            The animation was either manually restarted or repeated.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationState.Finished">
            <summary>
            The animation was played and completed.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationState.Activated">
            <summary>
            The animation is now the current animation for an entity.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.AnimatedTextSurface.AnimationState.Deactivated">
            <summary>
            The animation is no longer the current animation for an entity.
            </summary>
        </member>
        <member name="T:SadConsole.Consoles.AnimatedTextSurface.Serialized">
            <summary>
            Serialized instance of a <see cref="T:SadConsole.Consoles.AnimatedTextSurface"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Consoles.Console">
            <summary>
            Represents a traditional console that implements mouse and keyboard handling as well as a cursor.
            </summary>
        </member>
        <member name="E:SadConsole.Consoles.Console.MouseButtonClicked">
            <summary>
            Raised when the a mosue button is clicked on this console.
            </summary>
        </member>
        <member name="E:SadConsole.Consoles.Console.MouseMove">
            <summary>
            Raised when the mouse moves around the this console.
            </summary>
        </member>
        <member name="E:SadConsole.Consoles.Console.MouseExit">
            <summary>
            Raised when the mouse exits this console.
            </summary>
        </member>
        <member name="E:SadConsole.Consoles.Console.MouseEnter">
            <summary>
            Raised when the mouse enters this console.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Console._renderer">
            <summary>
            The renderer used to draw the <see cref="P:SadConsole.Consoles.Console.TextSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Console._position">
            <summary>
            Where the console should be located on the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Console._isVisible">
            <summary>
            Indicates the console is visible.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Console._parentConsole">
            <summary>
            The parent console.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Console._isMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Console._virtualCursor">
            <summary>
            The private virtual curser reference.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.AutoCursorOnFocus">
            <summary>
            Toggles the VirtualCursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.VirtualCursor">
            <summary>
            Represents a _virtualCursor that can be used to input information into the console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.Parent">
            <summary>
            Gets or sets the Parent console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.MoveToFrontOnMouseFocus">
            <summary>
            When true, this console will move to the front of its parent console when focused.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.MouseCanFocus">
            <summary>
            Allows the mouse (with a click) to focus this console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.CanUseKeyboard">
            <summary>
            Allows this console to accept keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.CanUseMouse">
            <summary>
            Allows this console to accept mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.CanFocus">
            <summary>
            Allows this console to be focusable.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.IsVisible">
            <summary>
            Indicates whether or not this console is visible.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.DoUpdate">
            <summary>
            When false, does not perform the code within the <see cref="M:SadConsole.Consoles.Console.Update"/> method. Defaults to true.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.Renderer">
            <summary>
            The renderer used to draw <see cref="P:SadConsole.Consoles.Console.TextSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.TextSurface">
            <summary>
            The text surface to be rendered or changed.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.Position">
            <summary>
            Gets or sets the position to render the cells.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.IsFocused">
            <summary>
            Gets or sets this console as the <see cref="P:SadConsole.Engine.ActiveConsole"/> value.
            </summary>
            <remarks>If the <see cref="P:SadConsole.Engine.ActiveConsole"/> has the <see cref="P:SadConsole.Consoles.Console.ExclusiveFocus"/> property set to true, you cannot use this property to set this console to focused.</remarks>
        </member>
        <member name="P:SadConsole.Consoles.Console.ExclusiveFocus">
            <summary>
            Gets or sets whether or not this console has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.MouseHandler">
            <summary>
            An alternative method handler for handling the mouse logic.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.KeyboardHandler">
            <summary>
            An alternative method handler for handling the keyboard logic.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Console.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.Consoles.Console.Position"/> of the console as if it is pixels and not cells.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.ProcessMouse(SadConsole.Input.MouseInfo)">
            <summary>
            Processes the mouse.
            </summary>
            <param name="info"></param>
            <returns>True when the mouse is over this console.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Console.ProcessKeyboard(SadConsole.Input.KeyboardInfo)">
            <summary>
            Called by the engine to process the keyboard. If the <see cref="P:SadConsole.Consoles.Console.KeyboardHandler"/> has been set, that will be called instead of this method.
            </summary>
            <param name="info">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnVisibleChanged">
            <summary>
            Called when the visibility of the console changes.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnFocusLost">
            <summary>
            Called when this console's focus has been lost.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnFocused">
            <summary>
            Called when this console is focused.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnPositionChanged(Microsoft.Xna.Framework.Point)">
            <summary>
            Called when the <see cref="P:SadConsole.Consoles.Console.Position" /> property changes.
            </summary>
            <param name="oldLocation">The location before the change.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnAfterRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called when the renderer renders the text view.
            </summary>
            <param name="batch">The batch used in renderering.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnBeforeRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called when the renderer renders the text view.
            </summary>
            <param name="batch">The batch used in renderering.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.Update">
            <summary>
            Updates the cell effects and cursor.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.OnParentConsoleChanged(SadConsole.Consoles.IConsoleList,SadConsole.Consoles.IConsoleList)">
            <summary>
            Called when the parent console changes for this console.
            </summary>
            <param name="oldParent">The previous parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.ExitMouse">
            <summary>
            Used by the console engine to properly clear the mouse over flag and call OnMouseExit. Used when mouse exits window.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.Save(System.String,System.Boolean,System.Type[])">
            <summary>
            Saves the <see cref="T:SadConsole.Consoles.Console"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
            <param name="saveTextSurface">When false the <see cref="P:SadConsole.Consoles.IConsole.TextSurface"/> property will not be serialized.</param>
            <param name="knownTypes">Types to provide if the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/> and <see cref="P:SadConsole.Consoles.Console.Renderer" /> types are custom and unknown to the serializer.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.Load(System.String,System.Type[])">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.Console"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <param name="knownTypes">Types to provide if the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/> and <see cref="P:SadConsole.Consoles.Console.Renderer" /> types are custom and unknown to the serializer.</param>
            <returns>The <see cref="T:SadConsole.Consoles.Console"/>.</returns>
        </member>
        <member name="T:SadConsole.Consoles.Console.Serialized">
            <summary>
            Serialized instance of a <see cref="T:SadConsole.Consoles.Console"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Console.Serialized.#ctor(SadConsole.Consoles.Console,System.Boolean)">
            <summary>
            Creates a serialized object from an existing <see cref="T:SadConsole.Consoles.Console"/>.
            </summary>
            <param name="surface">The surface to serialize.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.Serialized.Save(System.String,System.Type[])">
            <summary>
            Saves the serialized <see cref="T:SadConsole.Consoles.Console"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Consoles.Console.Serialized.Load(System.String,System.Type[])">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.TextSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns>A surface.</returns>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.CursorRenderCell">
            <summary>
            Cell used to render the cursor on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.PrintAppearance">
            <summary>
            Appearance used when printing text.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.PrintEffect">
            <summary>
            This effect is applied to each cell printed by the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.PrintOnlyCharacterData">
            <summary>
            When true, indicates that the cursor, when printing, should not use the <see cref="P:SadConsole.Consoles.Cursor.PrintAppearance"/> property in determining the color/effect of the cell, but keep the cell the same as it was.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.IsVisible">
            <summary>
            Shows or hides the cursor. This does not affect how the cursor operates.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.Position">
            <summary>
            Gets or sets the location of the cursor on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Cursor.DisableWordBreak">
            <summary>
            When true, prevents the <see cref="M:SadConsole.Consoles.Cursor.Print(System.String)"/> method from breaking words up by spaces when wrapping lines.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.Cursor.UseLinuxLineEndings">
            <summary>
            Enables linux-like string parsing where a \n behaves like a \r\n.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.Row">
            <summary>
            Gets or sets the row of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.Column">
            <summary>
            Gets or sets the column of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.Cursor.AutomaticallyShiftRowsUp">
            <summary>
            Indicates that the when the cursor goes past the last cell of the console, that the rows should be shifted up when the cursor is automatically reset to the next line.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.#ctor(SadConsole.Consoles.SurfaceEditor)">
            <summary>
            Creates a new instance of the cursor class that will work with the specified console.
            </summary>
            <param name="console">The console this cursor will print on.</param>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.AttachConsole(SadConsole.Consoles.SurfaceEditor)">
            <summary>
            Sets the console this cursor is targetting.
            </summary>
            <param name="console">The console the cursor works with.</param>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.ResetCursorEffect">
            <summary>
            Resets the <see cref="P:SadConsole.Consoles.Cursor.CursorRenderCell"/> back to the default.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.ResetAppearanceToConsole">
            <summary>
            Resets the cursor appearance to the console's default foreground and background.
            </summary>
            <returns>This cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when the backing console's CellData is null.</exception>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Print(System.String)">
            <summary>
            Prints text to the console using the default print appearance.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Print(System.String,SadConsole.ICellAppearance,SadConsole.Effects.ICellEffect)">
            <summary>
            Prints text on the console.
            </summary>
            <param name="text">The text to print.</param>
            <param name="template">The way the text will look when it is printed.</param>
            <param name="templateEffect">Effect to apply to the text as its printed.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Print(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.CarriageReturn">
            <summary>
            Returns the cursor to the start of the current line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.LineFeed">
            <summary>
            Moves the cursor down a line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.NewLine">
            <summary>
            Calls the <see cref="M:CarriageReturn()"/> and <see cref="M:LineFeed()"/> methods in a single call.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Up(System.Int32)">
            <summary>
            Moves the cusor up by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Down(System.Int32)">
            <summary>
            Moves the cusor down by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Left(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.LeftWrap(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.Right(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Consoles.Cursor.RightWrap(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="T:SadConsole.Consoles.ConsoleList">
            <summary>
            Represents a list of consoles. By calling the <see cref="M:SadConsole.Consoles.ConsoleList.Update"/> or <see cref="M:SadConsole.Consoles.ConsoleList.Render"/> methods, all contained consoles will be called in order.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ConsoleList.Parent">
            <summary>
            The parent console.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.ConsoleList.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.ConsoleList.Contains(SadConsole.Consoles.IConsole)">
            <summary>
            Returns true if this console list contains the specified console.
            </summary>
            <param name="console">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Consoles.IConsole">
            <summary>
            Supports basic console management and input functionallity.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsole.Position">
            <summary>
            The top-left coordinate of the screen where the console is located.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsole.TextSurface">
            <summary>
            The surface of the console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsole.VirtualCursor">
            <summary>
            A controllable cursor for the console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsole.Parent">
            <summary>
            A parent list containing the console. Optional.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsole.UsePixelPositioning">
            <summary>
            When true, changes the <see cref="P:SadConsole.Consoles.IConsole.Position"/> to be in pixels rather than cell coordinates.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsole.AutoCursorOnFocus">
            <summary>
            Toggles the VirtualCursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="T:SadConsole.Consoles.IConsoleList">
            <summary>
            Represents a group of consoles.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsoleList.Count">
            <summary>
            Gets the count of child consoles.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.IConsoleList.Item(System.Int32)">
            <summary>
            Gets or sets a console by index.
            </summary>
            <param name="index">The index of the console.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.Add(SadConsole.Consoles.IConsole)">
            <summary>
            Adds a console.
            </summary>
            <param name="console">The console.</param>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.Insert(System.Int32,SadConsole.Consoles.IConsole)">
            <summary>
            Inserts a console at the specified index.
            </summary>
            <param name="index">The index at which to insert the console.</param>
            <param name="console">The console to insert.</param>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.Remove(SadConsole.Consoles.IConsole)">
            <summary>
            Removes the specified console.
            </summary>
            <param name="console">The console.</param>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.IndexOf(SadConsole.Consoles.IConsole)">
            <summary>
            Gets the index of the spcified console.
            </summary>
            <param name="console">The console.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.MoveToTop(SadConsole.Consoles.IConsole)">
            <summary>
            Moves a console to the top of the list of child consoles. Ensures it is rendered on top of all other consoles.
            </summary>
            <param name="console">The console.</param>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.MoveToBottom(SadConsole.Consoles.IConsole)">
            <summary>
            Moves a console to the bottom of the list of child consoels. Ensures it is rendered behind all other consoles.
            </summary>
            <param name="console"></param>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.NextValidConsole(SadConsole.Consoles.IConsole)">
            <summary>
            Gets the next visible console positioned after the specified console.
            </summary>
            <param name="currentConsole">The reference console.</param>
            <returns>The next visible console.</returns>
        </member>
        <member name="M:SadConsole.Consoles.IConsoleList.PreviousValidConsole(SadConsole.Consoles.IConsole)">
            <summary>
            Gets the previous visible console positioned before the specified console.
            </summary>
            <param name="currentConsole">The reference console.</param>
            <returns>The previous visible console.</returns>
        </member>
        <member name="T:SadConsole.Consoles.ITextSurface">
            <summary>
            Basic information about a text surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.Width">
            <summary>
            The width of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.Height">
            <summary>
            The height of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.DefaultBackground">
            <summary>
            The default background of the surface. Some operations take this into account.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.DefaultForeground">
            <summary>
            The default foreground of the surface. Some operations take this into account.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.Cells">
            <summary>
            Each cell of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">Index from the <see cref="P:SadConsole.Consoles.ITextSurface.Cells"/> array.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurface.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates
            </summary>
            <param name="x">The x coordinate in the surface.</param>
            <param name="y">The y coordinate in the surface.</param>
            <returns>The cell.</returns>
        </member>
        <member name="T:SadConsole.Consoles.ITextSurfaceRendered">
            <summary>
            A text surface with rendering information.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRendered.AbsoluteArea">
            <summary>
            In pixels, how much area of the screen this surface covers.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRendered.RenderRects">
            <summary>
            Each screen rectangle for <see cref="P:SadConsole.Consoles.ITextSurface.Cells"/> used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRendered.RenderCells">
            <summary>
            The cells used for rendering if the <see cref="P:SadConsole.Consoles.ITextSurfaceRendered.RenderArea"/> is not the entire text surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRendered.Font">
            <summary>
            Font used for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRendered.Tint">
            <summary>
            An optional color tint applied after rendering. Recolors the entire surface. Use <see cref="P:Microsoft.Xna.Framework.Color.Transparent"/> to disable this.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRendered.RenderArea">
            <summary>
            A view of the <see cref="P:SadConsole.Consoles.ITextSurface.Cells"/> which changes which cells will be drawn.
            </summary>
        </member>
        <member name="T:SadConsole.Consoles.LayeredTextSurface">
            <summary>
            Text surface with multiple layers.
            </summary>
        </member>
        <member name="T:SadConsole.Consoles.LayeredTextSurface.Layer">
            <summary>
            A layer.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.LayeredTextSurface.Layer.Cells">
            <summary>
            All cells of the layer.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.LayeredTextSurface.Layer.RenderCells">
            <summary>
            The cells that will be rendered.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.LayeredTextSurface.Layer.IsVisible">
            <summary>
            When true, the layer will be drawn.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.LayeredTextSurface.Layer.Metadata">
            <summary>
            Custom object.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.LayeredTextSurface.Layer.Index">
            <summary>
            The index of the layer.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Layer.ToTextSurface(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Converts the layer data into a <see cref="T:SadConsole.Consoles.TextSurface"/>.
            </summary>
            <param name="width">Target width of the <see cref="T:SadConsole.Consoles.TextSurface"/>.</param>
            <param name="height">Target height of the <see cref="T:SadConsole.Consoles.TextSurface"/>.</param>
            <param name="font">Target font of the <see cref="T:SadConsole.Consoles.TextSurface"/>.</param>
            <returns>A new <see cref="T:SadConsole.Consoles.TextSurface"/> seeded by this layer data.</returns>
        </member>
        <member name="F:SadConsole.Consoles.LayeredTextSurface.layers">
            <summary>
            Layers for the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.LayeredTextSurface.LayerCount">
            <summary>
            Count of layers.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.LayeredTextSurface.ActiveLayerIndex">
            <summary>
            The current zero-based active layer index.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.LayeredTextSurface.ActiveLayer">
            <summary>
            Gets the active layer.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new layer text surface with the default <see cref="T:SadConsole.Font"/>.
            </summary>
            <param name="width">Width of the layers.</param>
            <param name="height">Height of the layers.</param>
            <param name="layers">The count of layers.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.#ctor(System.Int32,System.Int32,SadConsole.Font,System.Int32)">
            <summary>
            Creates a new layer text surface with the specified font.
            </summary>
            <param name="width">Width of the layers.</param>
            <param name="height">Height of the layers.</param>
            <param name="layers">The count of layers.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.SetActiveLayer(System.Int32)">
            <summary>
            Changes the active layer, which sets the current cell data for <see cref="T:SadConsole.Consoles.ITextSurfaceRendered"/>.
            </summary>
            <param name="index">The zero-based index of the layer.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.SetActiveLayer(SadConsole.Consoles.LayeredTextSurface.Layer)">
            <summary>
            Changes the active layer, which sets the current cell data for <see cref="T:SadConsole.Consoles.ITextSurfaceRendered"/>.
            </summary>
            <param name="layer">The layer to set active.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.GetLayers">
            <summary>
            Gets all of the layers.
            </summary>
            <returns>The layers.</returns>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Add">
            <summary>
            Adds a new layer.
            </summary>
            <returns>The created layer.</returns>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Remove(SadConsole.Consoles.LayeredTextSurface.Layer)">
            <summary>
            Removes a layer.
            </summary>
            <param name="layer">The layer to remove.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Remove(System.Int32)">
            <summary>
            Removes a layer.
            </summary>
            <param name="index">The layer index to remove.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Move(SadConsole.Consoles.LayeredTextSurface.Layer,System.Int32)">
            <summary>
            Moves a layer to the specified index.
            </summary>
            <param name="layer">The layer to check.</param>
            <param name="index">The new index of the layer.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.MoveToTop(SadConsole.Consoles.LayeredTextSurface.Layer)">
            <summary>
            Moves a layer to the top.
            </summary>
            <param name="layer">The layer to check.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.MoveToBottom(SadConsole.Consoles.LayeredTextSurface.Layer)">
            <summary>
            Moves a layer to the bottom.
            </summary>
            <param name="layer">The layer to check.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.IndexOf(SadConsole.Consoles.LayeredTextSurface.Layer)">
            <summary>
            Gets the index of a layer.
            </summary>
            <param name="layer">The layer to check.</param>
            <returns>The index of the layer.</returns>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.GetLayer(System.Int32)">
            <summary>
            Gets a specific layer.
            </summary>
            <param name="index">The zero-based layer to get.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Save(System.String,System.Type[])">
            <summary>
            Saves the <see cref="T:SadConsole.Consoles.LayeredTextSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
            <param name="knownTypes">Types to provide if the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/> and <see cref="!:Renderer" /> types are custom and unknown to the serializer.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Load(System.String,System.Type[])">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.LayeredTextSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <param name="knownTypes">Types to provide if the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/> and <see cref="!:Renderer" /> types are custom and unknown to the serializer.</param>
            <returns>The <see cref="T:SadConsole.Consoles.LayeredTextSurface"/>.</returns>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Consoles.LayeredTextSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextSurface.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.LayeredTextSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Consoles.CachedTextSurfaceRenderer">
            <summary>
            Caches a text surface by rendering to a texture. That texture is then rendered at draw time. Reduces draw calls for a non-changing console.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.CachedTextSurfaceRenderer.Batch">
            <summary>
            The sprite batch used for drawing to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.CachedTextSurfaceRenderer.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text is drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.CachedTextSurfaceRenderer.AfterRenderCallback">
            <summary>
            A method called when all text has been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.CachedTextSurfaceRenderer.#ctor(SadConsole.Consoles.ITextSurfaceRendered)">
            <summary>
            Creates a new renderer.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.CachedTextSurfaceRenderer.Update(SadConsole.Consoles.ITextSurfaceRendered)">
            <summary>
            Updates the cache based on the <paramref name="source"/> surface.
            </summary>
            <param name="source">The surface to render and cache.</param>
        </member>
        <member name="M:SadConsole.Consoles.CachedTextSurfaceRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Renders the cached surface from a previous call to the constructor or the <see cref="M:SadConsole.Consoles.CachedTextSurfaceRenderer.Update(SadConsole.Consoles.ITextSurfaceRendered)"/> method.
            </summary>
            <param name="surface">Used only for tinting.</param>
            <param name="renderingMatrix">Display matrix for the rendered console.</param>
        </member>
        <member name="M:SadConsole.Consoles.CachedTextSurfaceRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Renders the cached surface from a previous call to the constructor or the <see cref="M:SadConsole.Consoles.CachedTextSurfaceRenderer.Update(SadConsole.Consoles.ITextSurfaceRendered)"/> method.
            </summary>
            <param name="surface">Only used for tinting and calculation the position from the font.</param>
            <param name="position">Calculates the rendering position on the screen based on the size of the <paramref name="surface"/> parameter.</param>
            <param name="usePixelPositioning">Ignores the <paramref name="surface"/> font for positioning and instead treats the <paramref name="position"/> parameter in pixels.</param>
        </member>
        <member name="M:SadConsole.Consoles.CachedTextSurfaceRenderer.GetPositionTransform(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Gets the Matrix transform that positions the console on the screen.
            </summary>
            <returns>The transform.</returns>
        </member>
        <member name="T:SadConsole.Consoles.ITextSurfaceRenderer">
            <summary>
            Represents the ability to render cell data to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRenderer.Batch">
            <summary>
            The SpriteBatch used when rendering cell data.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRenderer.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text characters are drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.ITextSurfaceRenderer.AfterRenderCallback">
            <summary>
            A method called when all text characters have been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.ITextSurfaceRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Renders the cell data to the screen.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.ITextSurfaceRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Renders the cell data to the screen.
            </summary>
        </member>
        <member name="T:SadConsole.Consoles.LayeredTextRenderer">
            <summary>
            Renders a <see cref="T:SadConsole.Consoles.LayeredTextSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.LayeredTextRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Only renders a <see cref="T:SadConsole.Consoles.LayeredTextSurface"/>.
            </summary>
            <param name="surface">The <see cref="T:SadConsole.Consoles.LayeredTextSurface"/> to render.</param>
            <param name="renderingMatrix">Rendering matrix used with the sprite batch.</param>
        </member>
        <member name="T:SadConsole.Consoles.TextSurfaceRenderer">
            <summary>
            Draws a text surface to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceRenderer.Batch">
            <summary>
            The sprite batch used for drawing to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceRenderer.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text characters are drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceRenderer.AfterRenderCallback">
            <summary>
            A method called when all text characters have been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceRenderer.#ctor">
            <summary>
            Creates a new renderer.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Renders a surface to the screen.
            </summary>
            <param name="surface">The surface to render.</param>
            <param name="renderingMatrix">Display matrix for the rendered console.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceRenderer.Render(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Renders a surface to the screen.
            </summary>
            <param name="surface">The surface to render.</param>
            <param name="position">Calculates the rendering position on the screen based on the size of the <paramref name="surface"/> parameter.</param>
            <param name="usePixelPositioning">Ignores the <paramref name="surface"/> font for positioning and instead treats the <paramref name="position"/> parameter in pixels.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceRenderer.GetPositionTransform(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Gets the Matrix transform that positions the console on the screen.
            </summary>
            <returns>The transform.</returns>
        </member>
        <member name="T:SadConsole.Consoles.TextSurfaceBasic">
            <summary>
            Basic implementation of <see cref="T:SadConsole.Consoles.ITextSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.TextSurfaceBasic.cells">
            <summary>
            An array of all cells in this surface.
            </summary>
            <remarks>This array is calculated internally and its size shouldn't be modified. Use the <see cref="F:SadConsole.Consoles.TextSurfaceBasic.width"/> and <see cref="F:SadConsole.Consoles.TextSurfaceBasic.height"/> properties instead. The cell data can be changed.</remarks>
        </member>
        <member name="F:SadConsole.Consoles.TextSurfaceBasic.width">
            <summary>
            The width of the surface.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.TextSurfaceBasic.height">
            <summary>
            The height of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.DefaultForeground">
            <summary>
            The default foreground for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.DefaultBackground">
            <summary>
            The default background for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.Width">
            <summary>
            How many cells wide the surface is.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.Height">
            <summary>
            How many cells high the surface is.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.Cells">
            <summary>
            All cells of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on its coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Consoles.TextSurfaceBasic.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceBasic.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">THe height of the surface.</param>
            <param name="font">The font used with rendering.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceBasic.#ctor(System.Int32,System.Int32,SadConsole.Cell[])">
            <summary>
            Creates a new text surface with the specified width, height, and initial set of cell data.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">THe height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="initialCells"></param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceBasic.InitializeCells">
            <summary>
            Initializes the cells. This method caches all of the rendering points and rectangles and initializes each cell.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceBasic.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Consoles.TextSurfaceBasic"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceBasic.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.TextSurfaceBasic"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Consoles.SurfaceEditor">
            <summary>
            Provides methods to manipulate a <see cref="T:SadConsole.Consoles.ITextSurfaceRendered"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.SurfaceEditor.Width">
            <summary>
            The width of the text surface being edited.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.SurfaceEditor.Height">
            <summary>
            The height of the text surface being edited.
            </summary>
        </member>
        <member name="F:SadConsole.Consoles.SurfaceEditor.UsePrintProcessor">
            <summary>
            When true, the <see cref="!:ColoredString.Parse(string, int, ITextSurface, ParseCommandStacks)"/> command is used to print strings.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.SurfaceEditor.TextSurface">
            <summary>
            The text surface being changed.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.SurfaceEditor.Effects">
            <summary>
            The effects manager associated with the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/>.
            </summary>
            <remarks>
            When the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/> property is set, a new <see cref="T:SadConsole.Effects.EffectsManager"/> instance is created.
            </remarks>
        </member>
        <member name="P:SadConsole.Consoles.SurfaceEditor.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on it's coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.Consoles.SurfaceEditor.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.#ctor(SadConsole.Consoles.ITextSurface)">
            <summary>
            Creates a new cell surface that can be resized and also have its textSurface.Cells resized.
            </summary>
            <remarks>You must set the Font property before rendering this cell surface.</remarks>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.OnSurfaceChanged(SadConsole.Consoles.ITextSurface,SadConsole.Consoles.ITextSurface)">
            <summary>
            Called when the <see cref="P:SadConsole.Consoles.SurfaceEditor.TextSurface"/> property is changed. Sets <see cref="P:SadConsole.Consoles.SurfaceEditor.Effects"/> to a new instance of <see cref="T:SadConsole.Effects.EffectsManager"/>.
            </summary>
            <param name="oldSurface">The previous text surface.</param>
            <param name="newSurface">The new text surface.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetPixels(Microsoft.Xna.Framework.Color[])">
            <summary>
            Sets each background of a cell to the array of colors. Must be the same length as this cell surface.
            </summary>
            <param name="pixels">The colors to place.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.IsValidCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.IsValidCell(System.Int32)">
            <summary>
            Tests if a cell is valid based on its index.
            </summary>
            <param name="index">The index to test.</param>
            <returns>A true value indicating the cell index is in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the glyph of a specified cell to a new value.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph of the cell.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the glyph, foreground, background, and effect of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="effect">Sets the effect of the cell</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetGlyph(System.Int32,System.Int32)">
            <summary>
            Gets the glyph of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The glyph index.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetForeground(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the foreground of a specified cell to a new color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetForeground(System.Int32,System.Int32)">
            <summary>
            Gets the foreground of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetBackground(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the background of a cell to the specified color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetBackground(System.Int32,System.Int32)">
            <summary>
            Gets the background of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetEffect(System.Int32,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetEffect(System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="index">Index of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.Cell},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetEffect(System.Int32,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetCellAppearance(System.Int32,System.Int32,SadConsole.ICellAppearance)">
            <summary>
            Changes the appearance of the cell. The appearance represents the look of a cell and will first be cloned, then applied to the cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="appearance">The desired appearance of the cell. A null value cannot be passed.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetCellAppearance(System.Int32,System.Int32)">
            <summary>
            Gets the appearance of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The appearance.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetSpriteEffect(System.Int32,System.Int32)">
            <summary>
            Gets the sprite effect of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.SetSpriteEffect(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Sets the sprite effect of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="spriteEffect">The sprite effect of the cell.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.FillWithRandomGarbage(System.Boolean)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Print(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the string on the console at the specified location and color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the string on the console at the specified location with the specified foreground and background color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Print(System.Int32,System.Int32,System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="spriteEffect">The sprite effect to set on the cell.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Print(System.Int32,System.Int32,System.String,SadConsole.ICellAppearance,SadConsole.Effects.ICellEffect)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="appearance">The appearance of the cell</param>
            <param name="effect">An optional effect to apply to the printed cells.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Print(System.Int32,System.Int32,SadConsole.ColoredString)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetString(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetStringColored(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.GetStringColored(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Clear">
            <summary>
            Clears the console data. Characters are reset to 0, the forground and background are set to default, and effect set to none.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Clear(System.Int32,System.Int32)">
            <summary>
            Clears a cell. Character is reset to 0, the forground and background is set to default, and effect is set to none.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftUp">
            <summary>
            Scrolls all the console data up by one.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftUp(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data up by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftDown">
            <summary>
            Scrolls all the console data down by one.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftDown(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data down by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftRight">
            <summary>
            Scrolls all the console data right by one.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftRight(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data right by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftLeft">
            <summary>
            Scrolls all the console data left by one.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data left by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Fill(System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills the console.
            </summary>
            <param name="foreground">Foregorund of every cell. If null, skips.</param>
            <param name="background">Foregorund of every cell. If null, skips.</param>
            <param name="glyph">Glyph of every cell. If null, skips.</param>
            <param name="spriteEffect">Sprite effect of every cell. If null, skips.</param>
        </member>
        <member name="M:SadConsole.Consoles.SurfaceEditor.Fill(Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills the specified area.
            </summary>
            <param name="area">The area to fill.</param>
            <param name="foreground">Foregorund of every cell. If null, skips.</param>
            <param name="background">Foregorund of every cell. If null, skips.</param>
            <param name="glyph">Glyph of every cell. If null, skips.</param>
            <param name="spriteEffect">Sprite effect of every cell. If null, skips.</param>
        </member>
        <member name="T:SadConsole.Consoles.TextSurface">
            <summary>
            The base class for a text surface. Provides code for the view port and basic cell access.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.CellCount">
            <summary>
            The total cells for this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.Font">
            <summary>
            Font used with rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.AbsoluteArea">
            <summary>
            Pixel area of the render cells.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.RenderRects">
            <summary>
            Destination rectangles for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.RenderCells">
            <summary>
            Cells that will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Consoles.TextSurface.RenderArea">
            <summary>
            Sets the area of the text surface that should be rendered.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurface.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new text surface with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">THe height of the surface.</param>
            <param name="font">The font used with rendering.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurface.#ctor(System.Int32,System.Int32,SadConsole.Cell[],SadConsole.Font)">
            <summary>
            Creates a new text surface with the specified width, height, and initial set of cell data.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">THe height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="initialCells"></param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurface.InitializeCells">
            <summary>
            Sets <see cref="P:SadConsole.Consoles.TextSurface.RenderCells"/> to <see cref="F:SadConsole.Consoles.TextSurfaceBasic.cells"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurface.ResetArea">
            <summary>
            Keeps the text view data in sync with this surface.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurface.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Consoles.TextSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurface.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.TextSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Consoles.TextSurfaceView">
            <summary>
            A text surface created from an existing text surface.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceView.#ctor(SadConsole.Consoles.ITextSurfaceRendered,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new surface view from an existing surface.
            </summary>
            <param name="surface">The source cell data.</param>
            <param name="area">The area of the text surface.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceView.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Consoles.TextSurfaceView"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceView.Load(System.String,SadConsole.Consoles.ITextSurfaceRendered)">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.TextSurfaceView"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <param name="surfaceBase">The surface this view was created from.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Consoles.TextSurfaceView.Serialized">
            <summary>
            Serialized instance of a <see cref="T:SadConsole.Consoles.TextSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceView.Serialized.#ctor(SadConsole.Consoles.TextSurfaceView)">
            <summary>
            Creates a serialized object from an existing <see cref="T:SadConsole.Consoles.TextSurfaceView"/>.
            </summary>
            <param name="surface">The surface to serialize.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceView.Serialized.Save(System.String)">
            <summary>
            Saves the serialized <see cref="T:SadConsole.Consoles.TextSurfaceView"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceView.Serialized.Load(System.String,SadConsole.Consoles.ITextSurfaceRendered)">
            <summary>
            Loads a <see cref="T:SadConsole.Consoles.TextSurfaceView"/> from a file and existing <see cref="T:SadConsole.Consoles.ITextSurfaceRendered"/>.
            </summary>
            <param name="file">The source file.</param>
            <param name="surfaceHydrate">The surface this view was originally from.</param>
            <returns>A surface view.</returns>
        </member>
        <member name="T:SadConsole.Consoles.TextSurfaceExtensions">
            <summary>
            Extension methods relating to all text surface types.
            </summary>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.IsValidCell(SadConsole.Consoles.ITextSurface,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.IsValidCell(SadConsole.Consoles.ITextSurface,System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.GetCell(SadConsole.Consoles.ITextSurface,System.Int32,System.Int32)">
            <summary>
            Gets a cell based on it's coordinates on the surface.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.GetIndexFromPoint(SadConsole.Consoles.ITextSurface,Microsoft.Xna.Framework.Point)">
            <summary>
            Gets the index of a location on the surface by point.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="location">The location of the index to get.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.GetIndexFromPoint(SadConsole.Consoles.ITextSurface,System.Int32,System.Int32)">
            <summary>
            Gets the index of a location on the surface by coordinate.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="x">The x of the location.</param>
            <param name="y">The y of the location.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.GetPointFromIndex(SadConsole.Consoles.ITextSurface,System.Int32)">
            <summary>
            Gets the x,y of an index on the surface.
            </summary>
            <param name="surface">The surface to check.</param>
            <param name="index">The index to get.</param>
            <returns>The x,y as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.Copy(SadConsole.Consoles.ITextSurface,SadConsole.Consoles.ITextSurface)">
            <summary>
            Copies the contents of the cell surface to the destination.
            </summary>
            <remarks>If the sizes to not match, it will always start at 0,0 and work with what it can and move on to the next row when either surface runs out of columns being processed</remarks>
            <param name="source">The source surface</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.Copy(SadConsole.Consoles.ITextSurface,SadConsole.Consoles.ITextSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the cell surface to the destination at the specified x,y.
            </summary>
            <param name="x">The x coordinate of the destination.</param>
            <param name="y">The y coordinate of the destination.</param>
            <param name="source">The source surface</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.Consoles.TextSurfaceExtensions.Copy(SadConsole.Consoles.ITextSurface,System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.Consoles.ITextSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of this cell surface at the specified x,y coordinates to the destination, only with the specified width and height, and copies it to the specified <paramref name="destinationX"/> and <paramref name="destinationY"/> position.
            </summary>
            <param name="source">The source surface</param>
            <param name="x">The x coordinate to start from.</param>
            <param name="y">The y coordinate to start from.</param>
            <param name="width">The width to copy from.</param>
            <param name="height">The height to copy from.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="P:SadConsole.DoubleAnimation.EasingFunction">
            <summary>
            An easing method to apply to the value. The parameters passed in are: calculated value, starting value, ending value, and duration.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Blink">
            <summary>
            Switches between the normal foreground of a cell and a specified color for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.UseCellBackgroundColor">
            <summary>
            When true, uses the current cells background color for fading instead of the value of <see cref="P:SadConsole.Effects.Blink.BlinkOutColor"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkOutColor">
            <summary>
            The color to fade out to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.BlinkGlyph">
            <summary>
            Switches between the glyph of a cell and a specified glyph for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.GlyphIndex">
            <summary>
            The glyph index to blink into.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.CellEffectBase">
            <summary>
            A base class for cell effects.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.ConcurrentEffect">
            <summary>
            Allows more than one effect to be processed and applied to a cell at the same time.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ConcurrentEffect.Effects">
            <summary>
            The effects to be processed at the same time. Cannot be set to null.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Delay">
            <summary>
            An effect that doesn't do anything but delays. Usually used by the ChainEffect effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Delay.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsChain">
            <summary>
            Chains one effect after another.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsChain.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager">
            <summary>
            Effects manager for a text surface.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.Consoles.ITextSurface)">
            <summary>
            Creates a new effects manager associated with a text surface.
            </summary>
            <param name="surface">Text surface to manage.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a specific cell.
            </summary>
            <param name="cell">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.Cell},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of the <paramref name="cells"/> provided.
            </summary>
            <param name="cells">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffect(SadConsole.Cell)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)">
            <summary>
            Removes an effect and associated cells from the manager.
            </summary>
            <param name="effect">Effect to remove.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.RemoveAll">
            <summary>
            Removes all effects and associated cells.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.UpdateEffects(System.Double)">
            <summary>
            Updates all known effects and applies them to their associated cells.
            </summary>
            <param name="timeElapsed">The time elapased since the last update.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Save(System.String)">
            <summary>
            Saves the effects and the associated cell indexes from the backing surface.
            </summary>
            <param name="file">The file to save the effects to.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Load(System.String,SadConsole.Consoles.ITextSurfaceRendered)">
            <summary>
            Loads effects from a file.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="backingSurface">The surface the effects were originally (or will be) associated with.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.CellEffectData">
            <summary>
            Represents a mapping of a single effect and associated cells.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Fade">
            <summary>
            Fades both the background and foreground to seperate colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationBackground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationForeground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeDuration">
            <summary>
            Gets or sets how long the fade takes to complete in milliseconds.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.Repeat">
            <summary>
            Gets or sets a value to indicate that the fade effect should repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellForeground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationForeground"/> should replace its first color stop with the cell's foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellBackground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationBackground"/> should replace its first color stop with the cell's background color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeForeground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the foreground color on the cell's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeBackground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the background color on the cell's background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.AutoReverse">
            <summary>
            Gets or sets a value to indicate that the fade effect should automatically reverse itself when it finishes going up the color spectrum. By setting this to true, and setting the <see cref="P:SadConsole.Effects.Fade.Repeat"/> property to true, you can create a pulse effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.ICellEffect">
            <summary>
            The interface describing a cell effect
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.IsFinished">
            <summary>
            True when the effect is finished but attached to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.CloneOnApply">
            <summary>
            Flags this effect to be cloned when applied to a cell instead of reused.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.StartDelay">
            <summary>
            A delay applied to the effect only when it first runs.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RemoveOnFinished">
            <summary>
            When true, the effect should be disassociated with cells when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.Permanent">
            <summary>
            When true, indicates the effect this effect has on a cell should remain after this effect is cleared from the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Apply(SadConsole.Cell)">
            <summary>
            Applies the state of the effect to a cell.
            </summary>
            <param name="callingCell">The console cell using this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Update(System.Double)">
            <summary>
            Updates the state of the effect.
            </summary>
            <param name="gameTimeSeconds">Time since the last call to this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clear(SadConsole.Cell)">
            <summary>
            Clears the effect from the cell.
            </summary>
            <param name="cell">The console cell that will no longer use this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clone">
            <summary>
            Returns a duplicate of this effect.
            </summary>
            <returns>A new copy of this effect.</returns>
        </member>
        <member name="T:SadConsole.Effects.Recolor">
            <summary>
            Recors the foreground or the background of a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Foreground">
            <summary>
            The foreground color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Background">
            <summary>
            The background color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoForeground">
            <summary>
            When true, the <see cref="P:SadConsole.Effects.Recolor.Foreground"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoBackground">
            <summary>
            /// When true, the <see cref="P:SadConsole.Effects.Recolor.Background"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="F:SadConsole.Engine.ClearFrameColor">
            <summary>
            Clears the screen this color each frame.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.WindowWidth">
            <summary>
            The width of the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.WindowHeight">
            <summary>
            The height of the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.GameTimeElapsedUpdate">
            <summary>
            Total seconds since the last time the update method was called.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.GameTimeElapsedRender">
            <summary>
            Total seconds since the last time the render method was called.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.GameTimeUpdate">
            <summary>
            The GameTime object that was last used in the Update method.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.GameTimeDraw">
            <summary>
            The GameTime object that was last used in the Draw method.
            </summary>
        </member>
        <member name="F:SadConsole.Engine.ConsoleRenderStack">
            <summary>
            A list of consoles that will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.ActiveConsole">
            <summary>
            Sets the console that has focus. Active console receives keyboard and mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.Keyboard">
            <summary>
            Provides access to the state of the keyboard when the engine was last updated.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.Mouse">
            <summary>
            Provides access to the state of the mouse when the engine was last updated.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.UseKeyboard">
            <summary>
            Gets or sets a value to enable the keyboard for use with SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.UseMouse">
            <summary>
            Gets or sets a value to enable the mouse for use with SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.ProcessMouseWhenOffScreen">
            <summary>
            Gets or sets a value to indicate that the mouse (when enabled) should be processed even if the mouse is not over the game surface.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.DefaultFont">
            <summary>
            Gets or sets the default font to be used with the console. There must always be a default font set.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.RegisteredEffects">
            <summary>
            Gets a collection of effects currently registered with the engine.
            </summary>
        </member>
        <member name="F:SadConsole.Engine.Random">
            <summary>
            Centralized sudo random number generator used by SadConsole. Replace it with your own seed to replicate specific randomness.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.Fonts">
            <summary>
            A collection of fonts.
            </summary>
        </member>
        <member name="M:SadConsole.Engine.RegisterCellEffect``1">
            <summary>
            Informs the engine of the cell effect. Helps with serialization.
            </summary>
            <typeparam name="TEffectType">The effect type to register.</typeparam>
        </member>
        <member name="M:SadConsole.Engine.LoadFont(System.String)">
            <summary>
            Loads a font from a file and adds it to the <see cref="P:SadConsole.Engine.Fonts"/> collection.
            </summary>
            <param name="font">The font file to load.</param>
            <returns>A master font that you can generate a usable font from.</returns>
        </member>
        <member name="M:SadConsole.Engine.GetScreenSizeInCells(SadConsole.Font)">
            <summary>
            Returns the amount of cells (X,Y) given the specified <see cref="T:SadConsole.Font"/> and current <see cref="P:SadConsole.Engine.WindowWidth"/> and <see cref="P:SadConsole.Engine.WindowHeight"/> properties.
            </summary>
            <param name="font">The font.</param>
            <returns>The amount of cells along the X and Y axis.</returns>
        </member>
        <member name="M:SadConsole.Engine.GetScreenSizeInCells(SadConsole.Consoles.TextSurface)">
            <summary>
            Returns the amount of cells (X,Y) given the specified <see cref="T:SadConsole.Consoles.TextSurface"/> and current <see cref="P:SadConsole.Engine.WindowWidth"/> and <see cref="P:SadConsole.Engine.WindowHeight"/> properties.
            </summary>
            <param name="surface">The cell surface.</param>
            <returns>The amount of cells along the X and Y axis.</returns>
        </member>
        <member name="T:SadConsole.Engine.ShutdownEventArgs">
            <summary>
            Sent with the <see cref="E:SadConsole.Engine.EngineShutdown" /> event.
            </summary>
        </member>
        <member name="F:SadConsole.Engine.ShutdownEventArgs.BlockShutdown">
            <summary>
            When true, prevents the engine from shutting down.
            </summary>
        </member>
        <member name="F:SadConsole.Engine.MonoGameInstance">
            <summary>
            A game instance for SadConsole used when calling <see cref="M:SadConsole.Engine.Initialize(System.String,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.Device">
            <summary>
            The graphics device used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Engine.DeviceManager">
            <summary>
            The graphics device used by SadConsole.
            </summary>
        </member>
        <member name="M:SadConsole.Engine.Initialize(Microsoft.Xna.Framework.GraphicsDeviceManager,System.String,System.Int32,System.Int32)">
            <summary>
            Prepares the engine for use. This must be the first method you call on the engine when you provide your own <see cref="T:Microsoft.Xna.Framework.GraphicsDeviceManager"/>.
            </summary>
            <param name="deviceManager">The graphics device manager from MonoGame.</param>
            <param name="font">The font to load as the <see cref="P:SadConsole.Engine.DefaultFont"/>.</param>
            <param name="consoleWidth">The width of the default root console (and game window).</param>
            <param name="consoleHeight">The height of the default root console (and game window).</param>
            <returns>The default active console.</returns>
        </member>
        <member name="M:SadConsole.Engine.Initialize(System.String,System.Int32,System.Int32)">
            <summary>
            Prepares the engine for use. This must be the first method you call on the engine, then call <see cref="M:SadConsole.Engine.Run"/> to start SadConsole.
            </summary>
            <param name="font">The font to load as the <see cref="P:SadConsole.Engine.DefaultFont"/>.</param>
            <param name="consoleWidth">The width of the default root console (and game window).</param>
            <param name="consoleHeight">The height of the default root console (and game window).</param>
            <returns>The default active console.</returns>
        </member>
        <member name="T:SadConsole.PrimitiveStatic">
            <summary>
            Static primitives for compatibility with other rendering engines (monogame, sfml)
            </summary>
        </member>
        <member name="P:SadConsole.PrimitiveStatic.Vector2Zero">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector2"/> with components 0, 0.
            </summary>
        </member>
        <member name="T:SadConsole.Font">
            <summary>
            Represents a specific font size from a <see cref="T:SadConsole.FontMaster"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Font.FontSizes">
            <summary>
            The size options of a font.
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Quarter">
            <summary>
            One quater the size of the font. (Original Width and Height * 0.25)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Half">
            <summary>
            Half the size of the font. (Original Width and Height * 0.50)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.One">
            <summary>
            Exact size of the font. (Original Width and Height * 1.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Two">
            <summary>
            Two times the size of the font. (Original Width and Height * 2.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Three">
            <summary>
            Two times the size of the font. (Original Width and Height * 3.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Four">
            <summary>
            Two times the size of the font. (Original Width and Height * 4.0)
            </summary>
        </member>
        <member name="P:SadConsole.Font.FontImage">
            <summary>
            The texture of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Size">
            <summary>
            The width and height of each glyph.
            </summary>
        </member>
        <member name="P:SadConsole.Font.MaxGlyphIndex">
            <summary>
            The maximum upper inclusive glyph index of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphIndexRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Rows">
            <summary>
            How many rows are in this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SizeMultiple">
            <summary>
            The size originally used to create the font from a <see cref="T:SadConsole.FontMaster"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Name">
            <summary>
            The name of the font used when it is registered with the <see cref="P:SadConsole.Engine.Fonts"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Font.ResizeGraphicsDeviceManager(Microsoft.Xna.Framework.GraphicsDeviceManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the graphics device manager based on this font's glyph size.
            </summary>
            <param name="manager">Graphics device manager to resize.</param>
            <param name="width">The width glyphs.</param>
            <param name="height">The height glyphs.</param>
            <param name="additionalWidth">Additional pixel width to add to the resize.</param>
            <param name="additionalHeight">Additional pixel height to add to the resize.</param>
        </member>
        <member name="T:SadConsole.FontMaster">
            <summary>
            The font stored by the engine. Used to generate the <see cref="T:SadConsole.Font"/> type used by the engine.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Name">
            <summary>
            The name of this font family.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.FilePath">
            <summary>
            Where this font was loaded from.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphHeight">
            <summary>
            The height of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphWidth">
            <summary>
            The width of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Rows">
            <summary>
            The total rows in the font.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="F:SadConsole.FontMaster.GlyphIndexRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.Generate">
            <summary>
            After the font has been loaded, (with the <see cref="P:SadConsole.FontMaster.FilePath"/>, <see cref="P:SadConsole.FontMaster.GlyphHeight"/>, and <see cref="P:SadConsole.FontMaster.GlyphWidth"/> fields filled out) this method will create the actual texture.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.ConfigureRects">
            <summary>
            Builds the <see cref="F:SadConsole.FontMaster.GlyphIndexRects"/> array based on the current font settings.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.GetFont(SadConsole.Font.FontSizes)">
            <summary>
            Gets a sized font.
            </summary>
            <param name="multiple">How much to multiple the font size by.</param>
            <returns>A font.</returns>
        </member>
        <member name="T:SadConsole.FPSCounterComponent">
            <summary>
            A component to draw how many frames per second the engine is performing at.
            </summary>
        </member>
        <member name="T:SadConsole.SadConsoleGame">
            <summary>
            A MonoGame <see cref="T:Microsoft.Xna.Framework.Game"/> instance that runs SadConsole. This is used when you don't provide one and call <see cref="M:SadConsole.Engine.Initialize(System.String,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="T:SadConsole.EngineGameComponent">
            <summary>
            A game component to handle the SadConsole engine initialization, update, and drawing.
            </summary>
        </member>
        <member name="T:SadConsole.ICellAppearance">
            <summary>
            Describes the appearance of a cell. This includes the foreground and background colors, and the effect.
            </summary>
        </member>
        <member name="P:SadConsole.ICellAppearance.Foreground">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.ICellAppearance.Background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="P:SadConsole.ICellAppearance.GlyphIndex">
            <summary>
            The character index from a font sheet.
            </summary>
        </member>
        <member name="P:SadConsole.ICellAppearance.SpriteEffect">
            <summary>
            The SpriteBatch sprite mirror effect used when rendering the cell.
            </summary>
        </member>
        <member name="M:SadConsole.ICellAppearance.CopyAppearanceTo(SadConsole.ICellAppearance)">
            <summary>
            Copy the current appearance to another.
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey">
            <summary>
            Represents the state of a single key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.XnaKey">
            <summary>
            The key from MonoGame or XNA.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Character">
            <summary>
            The keyboard character of the key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.TimeHeld">
            <summary>
            Total time the key has been held.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.PreviouslyPressed">
            <summary>
            Tracks if the key was previously held when calcualting the <see cref="F:SadConsole.Input.KeyboardInfo.InitialRepeatDelay"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Fill(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <summary>
            Fills out the fields based on the MonoGame/XNA key.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">Helps identify which <see cref="F:SadConsole.Input.AsciiKey.Character"/> to use while the key is pressed. For example, if <see cref="F:Microsoft.Xna.Framework.Input.Keys.A"/> is used the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field will be either 'A' if <paramref name="shiftPressed"/> is true or 'a' if false.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> type. Shift is considered not pressed.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> type.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">If shift should be considered pressed or not.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the two <see cref="T:SadConsole.Input.AsciiKey"/> types use the same <see cref="F:SadConsole.Input.AsciiKey.XnaKey"/> if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is 0. If the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is not 0, the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is compared.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Compares if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field of two <see cref="T:SadConsole.Input.AsciiKey"/> instances are the same.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Equals(System.Object)">
            <summary>
            Compares references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithRightButton">
            <summary>
            Allows the right-mouse button to drag the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithLeftButton">
            <summary>
            Allows the left-mouse button to drag the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithKeyboard">
            <summary>
            Allows the keyboard keys to move the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveUpKey">
            <summary>
            Defines the key used to move the viewport up.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveDownKey">
            <summary>
            Defines the key used to move the viewport down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveLeftKey">
            <summary>
            Defines the key used to move the viewport left.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveRightKey">
            <summary>
            Defines the key used to move the viewport right.
            </summary>
        </member>
        <member name="T:SadConsole.Input.IInput">
            <summary>
            Represents an object that can handle the keyboard and mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IInput.CanUseKeyboard">
            <summary>
            Allows this console to accept keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IInput.CanUseMouse">
            <summary>
            Allows this console to accept mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IInput.CanFocus">
            <summary>
            Allows this console to be focusable.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IInput.IsFocused">
            <summary>
            Gets or sets this console as the <see cref="P:SadConsole.Engine.ActiveConsole"/> value.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IInput.ExclusiveFocus">
            <summary>
            Gets or sets whether or not this console has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="M:SadConsole.Input.IInput.ProcessMouse(SadConsole.Input.MouseInfo)">
            <summary>
            Processes the mouse. If the mosue is over this console and the left button is clicked, this console will move to the top and become active focus of the engine.
            </summary>
            <param name="info"></param>
            <returns>True when the mouse is over this console.</returns>
        </member>
        <member name="M:SadConsole.Input.IInput.ProcessKeyboard(SadConsole.Input.KeyboardInfo)">
            <summary>
            Called by the engine to process the keyboard. If the <see cref="!:KeyboardHandler"/> has been set, that will be called instead of this method.
            </summary>
            <param name="info">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="T:SadConsole.Input.KeyboardInfo">
            <summary>
            Represents the state of the keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.KeyboardInfo.KeysPressed">
            <summary>
            A collection of keys registered as pressed which behaves like a command prompt when holding down keys. Uses the <see cref="F:SadConsole.Input.KeyboardInfo.RepeatDelay"/> and <see cref="F:SadConsole.Input.KeyboardInfo.InitialRepeatDelay"/> settings.
            </summary>
        </member>
        <member name="P:SadConsole.Input.KeyboardInfo.KeysDown">
            <summary>
            A collection of keys currently held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.KeyboardInfo.KeysReleased">
            <summary>
            A collection of keys that were just released this frame.
            </summary>
        </member>
        <member name="F:SadConsole.Input.KeyboardInfo.RepeatDelay">
            <summary>
            How often a key is included in the <see cref="P:SadConsole.Input.KeyboardInfo.KeysPressed"/> collection after the <see cref="F:SadConsole.Input.KeyboardInfo.InitialRepeatDelay"/> time has passed.
            </summary>
        </member>
        <member name="F:SadConsole.Input.KeyboardInfo.InitialRepeatDelay">
            <summary>
            The initial delay after a key is first pressed before it is included a second time (while held down) in the <see cref="P:SadConsole.Input.KeyboardInfo.KeysPressed"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Input.KeyboardInfo.Clear">
            <summary>
            Clears the <see cref="P:SadConsole.Input.KeyboardInfo.KeysPressed"/>, <see cref="P:SadConsole.Input.KeyboardInfo.KeysDown"/>, <see cref="P:SadConsole.Input.KeyboardInfo.KeysReleased"/> collections.
            </summary>
        </member>
        <member name="M:SadConsole.Input.KeyboardInfo.ProcessKeys(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Reads the keyboard state using the <see cref="T:Microsoft.Xna.Framework.GameTime"/> from the update frame.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SadConsole.Input.KeyboardInfo.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.KeyboardInfo.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.KeyboardInfo.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.KeyboardInfo.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.KeyboardInfo.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true when they is in the <see cref="P:SadConsole.Input.KeyboardInfo.KeysReleased"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="T:SadConsole.Input.MouseEventArgs">
            <summary>
            Event arguments for mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseEventArgs.Console">
            <summary>
            The current console under the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseEventArgs.Cell">
            <summary>
            The cell of the current console under the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseEventArgs.ConsoleLocation">
            <summary>
            Which cell x,y the mouse is over on the console.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseEventArgs.ScreenLocation">
            <summary>
            Where the mouse is located on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseEventArgs.WorldLocation">
            <summary>
            What cell in the gameworld (top-left of window is 0,0) the mouse is located.
            </summary>
        </member>
        <member name="T:SadConsole.Input.MouseInfo">
            <summary>
            Processes mouse input data.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseInfo.Console">
            <summary>
            The current console under the mouse.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseInfo.Cell">
            <summary>
            The cell of the current console under the mouse.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseInfo.ConsoleLocation">
            <summary>
            Which cell x,y the mouse is over on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseInfo.ScreenLocation">
            <summary>
            Where the mouse is located on the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseInfo.WorldLocation">
            <summary>
            What cell in the gameworld (top-left of window is 0,0) the mouse is located.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.LeftButtonDown">
            <summary>
            Indicates the left mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.LeftClicked">
            <summary>
            Indicates the left mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.LeftDoubleClicked">
            <summary>
            Inidcates the left mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.RightButtonDown">
            <summary>
            Indicates the right mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.RightClicked">
            <summary>
            Indicates the right mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.RightDoubleClicked">
            <summary>
            Indicates the right mouse buttion was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.ScrollWheelValue">
            <summary>
            The cumulative value of the scroll wheel. 
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseInfo.ScrollWheelValueChange">
            <summary>
            The scroll wheel value change between frames.
            </summary>
        </member>
        <member name="M:SadConsole.Input.MouseInfo.ProcessMouse(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Fills out the state of the mouse.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SadConsole.Input.MouseInfo.Fill(SadConsole.Consoles.IConsole)">
            <summary>
            Sets the WorldLocation and ConsoleLocation properties based on the cell size of the provided console. If absolute positioning is used on the console, then the properties will represent pixels.
            </summary>
            <param name="data">The console to get the data from.</param>
            <remarks>This method alters the data of the mouse information based on the provided console. It </remarks>
        </member>
        <member name="M:SadConsole.Input.MouseInfo.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.CodeCallback">
            <summary>
            The code to execute when this instruction is run.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.Run">
            <summary>
            Runs this instruction.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.ConcurrentInstructions">
            <summary>
            
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DoubleInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DoubleInstruction.DoubleAnimationObject">
            <summary>
            The code to execute when this instruction is run.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DoubleInstruction.CodeCallback">
            <summary>
            The code to execute when this instruction is run.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DoubleInstruction.Run">
            <summary>
            Runs this instruction.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.DrawString">
            <summary>
            Draws a string to a console as if someone was typing.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.TotalTimeToPrint">
            <summary>
            Gets or sets the total time to take to write the string. Use zero for instant.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Position">
            <summary>
            Gets or sets the position on the console to write the text.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.FadeCellRenderer">
            <summary>
            Animates the change to the tint of a <see cref="!:SadConsole.Consoles.CellsRenderer"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeCellRenderer.Colors">
            <summary>
            The color to fade the tint to.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase`1">
            <summary>
            Base class for instructions that target and interact with an object.
            </summary>
            <typeparam name="TInstructedType">The type of object used with the instruction</typeparam>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase`1.Target">
            <summary>
            The target object to be used when the <see cref="!:Run"/> method is called.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase`1.#ctor(`0)">
            <summary>
            Creates a new instruction with the specified target object.
            </summary>
            <param name="targetObject">The object to target</param>
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase">
            <summary>
            Base class for all instructions.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.ExecutionFinished">
            <summary>
            Raised when the instruction completes.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.ExecutionRepeating">
            <summary>
            Raised when the instruction completes but is going to repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.IsFinished">
            <summary>
            Flags the instruction as completed or not. If completed, the <see cref="E:SadConsole.Instructions.InstructionBase.ExecutionFinished"/> event will be raised.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RepeatCount">
            <summary>
            Indicates how many times this set will repeat. Counts down every run. If set to -1 it will repeat forever. As this represents how many times to repeat, setting this value to 1 would allow the instruction to execute twice, once for the original time, and again for the repeat counter of 1.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Reset">
            <summary>
            Resets the Done flag.
            </summary>
            <remarks>On the base class, resets the <paramref name="Done"/> to false. Override this method to reset the derived class' counters and status flags for the instruction.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Repeat">
            <summary>
            Repeats the current instruction. Decrements the <see cref="P:SadConsole.Instructions.InstructionBase.RepeatCount"/> value (if applicable), and raises the <see cref="E:SadConsole.Instructions.InstructionBase.ExecutionRepeating"/> event. This method should be overridden in derived classes to customize how the object is reset for a repeat.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Run">
            <summary>
            Executes the instruction. This base class method should be called from derived classes. If the Done property is set to true, will try to repeat if needed and will raise all appropriate events.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnExecutionFinished">
            <summary>
            Raises the FinishedExecuting event.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnExecutionRepeating">
            <summary>
            Fires the FinishedExecuting event.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionSet">
            <summary>
            A set of instructions to be executed sequentially.
            </summary>
        </member>
        <member name="F:SadConsole.Instructions.InstructionSet.Instructions">
            <summary>
            All instructions in this set.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Name">
            <summary>
            The name of this instruction to identify it apart from other instruction sets.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.CurrentInstruction">
            <summary>
            Represents the current instruction if this set is currently executing.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Reset">
            <summary>
            Resets each instruction's status so that it can be run again.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Run">
            <summary>
            Runs the instruction set. Once all instructions are Done, this set will set the <see cref="!:Done"/> property will be set to true.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.Wait">
            <summary>
            Represents an instruction to pause for a specified duration.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Wait.Duration">
            <summary>
            The duration of the wait.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Serializer.InstructionTypes">
            <summary>
            The types commonly used when sesrializing an <see cref="!:Entity"/>.
            </summary>
        </member>
        <member name="T:SadConsole.IDraw">
            <summary>
            An object that draws to the screen and receives update ticks.
            </summary>
        </member>
        <member name="P:SadConsole.IDraw.IsVisible">
            <summary>
            Chooses to skip rendering or not.
            </summary>
        </member>
        <member name="P:SadConsole.IDraw.DoUpdate">
            <summary>
            Chooses to do updates or not.
            </summary>
        </member>
        <member name="M:SadConsole.IDraw.Update">
            <summary>
            Updates the object.
            </summary>
        </member>
        <member name="M:SadConsole.IDraw.Render">
            <summary>
            Draws the object to the screen.
            </summary>
        </member>
        <member name="F:SadConsole.PositionedCell.x">
            <summary>
            The desired X location of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.PositionedCell.y">
            <summary>
            The desired Y location of the cell.
            </summary>
        </member>
        <member name="P:SadConsole.PositionedCell.X">
            <summary>
            The desired X location of the cell.
            </summary>
        </member>
        <member name="P:SadConsole.PositionedCell.Y">
            <summary>
            The desired Y location of the cell.
            </summary>
        </member>
        <member name="P:SadConsole.PositionedCell.ActualX">
            <summary>
            The X location of the cell.
            </summary>
        </member>
        <member name="P:SadConsole.PositionedCell.ActualY">
            <summary>
            The Y location of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.PositionedCell.Reset">
            <summary>
            Resets the positioned cell with default values;
            </summary>
        </member>
        <member name="M:SadConsole.PositionedCell.Copy(SadConsole.PositionedCell)">
            <summary>
            Copies this positioned cell's values to another positioned cell.
            </summary>
            <param name="destination">The cell to write to.</param>
        </member>
        <member name="T:SadConsole.Readers.REXPaint.Cell">
            <summary>
            A RexPaint layer cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaint.Cell.Character">
            <summary>
            The character for the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaint.Cell.Foreground">
            <summary>
            The foreground color of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaint.Cell.Background">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Cell.IsTransparent">
            <summary>
            Returns true when the current color is considered transparent.
            </summary>
            <returns>True when transparent.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaint.Color">
            <summary>
            A RexPaint color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaint.Color.R">
            <summary>
            The red channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaint.Color.G">
            <summary>
            The green channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaint.Color.B">
            <summary>
            The blue channel of the color.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RexPaint color with the specified RGB channels.
            </summary>
            <param name="r">The red channel of the color.</param>
            <param name="g">The green channel of the color.</param>
            <param name="b">The blue channel of the color.</param>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Color.Transparent">
            <summary>
            Returns the transparent color used by RexPaint: rgb(255, 0, 255).
            </summary>
        </member>
        <member name="T:SadConsole.Readers.REXPaint.Image">
            <summary>
            A RexPaint image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Image.Version">
            <summary>
            The version of RexPaint that created this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Image.Width">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Image.Height">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Image.LayerCount">
            <summary>
            The total number of layers for this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Image.Layers">
            <summary>
            A read-only collection of layers.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RexPaint image.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.Create">
            <summary>
            Creates a new layer for the image adding it to the end of the layer stack.
            </summary>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.Create(System.Int32)">
            <summary>
            Creates a new layer for the image and inserts it at the specified position (0-based).
            </summary>
            <param name="index">The position to create the new layer at.</param>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.Add(SadConsole.Readers.REXPaint.Layer)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.Add(SadConsole.Readers.REXPaint.Layer,System.Int32)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image and inserts it at the specified position (0-based).
            </summary>
            <param name="layer">The layer to add.</param>
            <param name="index">The position to add the layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.Remove(SadConsole.Readers.REXPaint.Layer)">
            <summary>
            Removes the specified layer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.ToTextSurface">
            <summary>
            Converts this REXPaint image to a <see cref="T:SadConsole.Consoles.LayeredTextSurface"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Image.Load(System.IO.Stream)">
            <summary>
            Loads a .xp RexPaint image from a GZip compressed stream.
            </summary>
            <param name="stream">The GZip stream to load.</param>
            <returns>The RexPaint image.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaint.Layer">
            <summary>
            A layer of a RexPaint image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Layer.Width">
            <summary>
            The width of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Layer.Height">
            <summary>
            The height of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Layer.Cells">
            <summary>
            Represents all cells of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Layer.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates.
            </summary>
            <param name="x">The x (0-based) position of the cell.</param>
            <param name="y">The y (0-based) position of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Readers.REXPaint.Layer.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaint.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new layer with the specified width and height.
            </summary>
            <param name="width">The width of the layer.</param>
            <param name="height">The height of the layer.</param>
        </member>
        <member name="T:SadConsole.Readers.TextureToSurfaceReader">
            <summary>
            Reads a texture to a cached surface. Used for animation.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TextureToSurfaceReader.UseBlockMode">
            <summary>
            Renders the cells as blocks instead of characters.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.TextureToSurfaceReader.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="pixelWidth">Width the source texture.</param>
            <param name="pixelHeight">Height of the source texture.</param>
            <param name="font">Font used for rendering.</param>
        </member>
        <member name="M:SadConsole.Readers.TextureToSurfaceReader.GetSurface(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Returns a surface with the specified image rendered to it as characters.
            </summary>
            <param name="image">The image to render.</param>
            <returns>The surface.</returns>
        </member>
        <member name="T:SadConsole.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Serializer.ConsoleTypes">
            <summary>
            The types commonly used when sesrializing a basic console.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.Serialize``1(``0,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serializes the <paramref name="inputObject"/> instance using the specified <paramref name="output"/> stream.
            </summary>
            <typeparam name="T">The types of object to serialize</typeparam>
            <param name="inputObject">The object to serialize</param>
            <param name="output">The stream to write the serialization to.</param>
            <param name="knownTypes">Known types used during serialization.</param>
        </member>
        <member name="M:SadConsole.Serializer.Deserialize``1(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> using the specified <paramref name="input"/> stream.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="input">The input stream to read.</param>
            <param name="knownTypes">Known types used during deserialization.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="M:SadConsole.Serializer.Save``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serializes the <paramref name="instance"/> instance to the specified file.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="instance">The object to serialize.</param>
            <param name="file">The file to save the object to.</param>
            <param name="knownTypes">Optional list of known types for serialization.</param>
        </member>
        <member name="M:SadConsole.Serializer.Load``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> from the specified file.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="file">The file to load from.</param>
            <param name="knownTypes">Known types used during deserialization.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="T:SadConsole.Shapes.Line">
            <summary>
            Draws a line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.StartingLocation">
            <summary>
            Gets or sets the starting point of the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.EndingLocation">
            <summary>
            Gets or sets the ending point of the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.StartingCellAppearance">
            <summary>
            Gets or sets the appearance of the starting cell in the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.EndingCellAppearance">
            <summary>
            Gets or sets the appearance of the ending cell in the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.CellAppearance">
            <summary>
            Gets or sets the appearance of a cell in the line.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.UseStartingCell">
            <summary>
            When true, uses the <see cref="P:SadConsole.Shapes.Line.StartingCellAppearance"/> for the starting cell instead of <see cref="P:SadConsole.Shapes.Line.CellAppearance"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Shapes.Line.UseEndingCell">
            <summary>
            When true, uses the <see cref="P:SadConsole.Shapes.Line.EndingCellAppearance"/> for the starting cell instead of <see cref="P:SadConsole.Shapes.Line.CellAppearance"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Shapes.Line.#ctor">
            <summary>
            Creates a new instance of the line class with default values.
            </summary>
        </member>
        <member name="M:SadConsole.Shapes.Line.Draw(SadConsole.Consoles.SurfaceEditor)">
            <summary>
            Draws the line shape.
            </summary>
            <param name="surface">The cell surface to draw on.</param>
        </member>
        <member name="M:SadConsole.Shapes.Line.Draw(System.Collections.Generic.IEnumerable{SadConsole.Cell})">
            <summary>
            Draws the line shape across all of the cells. Will not draw the effect. Must be done outside of this method.
            </summary>
            <param name="cells">The cells to draw on.</param>
        </member>
        <member name="M:SadConsole.Shapes.Line.GetCells(SadConsole.Consoles.TextSurface)">
            <summary>
            Determines the cells that would be drawn on and returns them instead of drawing the line.
            </summary>
            <param name="surface">The surface to get the cells from.</param>
            <returns>The cells the line would have drawn on.</returns>
        </member>
        <member name="T:SadConsole.StringParser.CommandTypes">
            <summary>
            Command type of a <see cref="T:SadConsole.StringParser.ParseCommandBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Foreground">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Foreground"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Background">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Background"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Glyph">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Glyph"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.SpriteEffect">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.SpriteEffect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Effect">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Effect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.PureCommand">
            <summary>
            Command runs on creation and is not added to anything in <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Invalid">
            <summary>
            Command is invalid and should not be processed at all.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBase">
            <summary>
            Base class for a string processor behavior.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBase.CommandType">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Build(SadConsole.ColoredGlyph@,SadConsole.ColoredGlyph[],System.Int32,SadConsole.Consoles.ITextSurface,SadConsole.Consoles.SurfaceEditor,System.Int32@,System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Builds a glyph.
            </summary>
            <param name="glyphState">The current glyph being built.</param>
            <param name="glyphString">The current string of glyphs that has been processed until now.</param>
            <param name="surfaceIndex">Where on the surface this flyph will appear.</param>
            <param name="surface">The surface associated with the glyph.</param>
            <param name="editor">The editor associated with the surface.</param>
            <param name="stringIndex">Where in the original string this glyph is from.</param>
            <param name="processedString">The entire string being processed.</param>
            <param name="commandStack">The state of commands.</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBlink">
            <summary>
            Blinks characters.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSetGlyph">
            <summary>
            Prints a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandGradient">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandRecolor">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSpriteEffect">
            <summary>
            Sets the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteEffects"/> of a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandStacks">
            <summary>
            A list of behaviors applied as a string is processed.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.AddSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Adds a behavior to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> collection and the collection based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/> type.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.RemoveSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Removes a command from the appropriate command stack and from the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> stack.
            </summary>
            <param name="command">The command to remove</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandUndo">
            <summary>
            Pops a behavior off of a <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorExtensions.ColorMappings">
            <summary>
            Custom color mappings for the <see cref="M:Microsoft.Xna.Framework.ColorExtensions.FromParser(Microsoft.Xna.Framework.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.RedOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Red value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GreenOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Green value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.BlueOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Blue value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ToParser(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts a color to the format used by <see cref="!:SadConsole.ParseCommandRecolor"/> command.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string in this format R,G,B,A so for <see cref="P:Microsoft.Xna.Framework.Color.Green"/> you would get <code>0,128,0,255</code>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FromParser(Microsoft.Xna.Framework.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a color in the format of <see cref="!:SadConsole.ParseCommandRecolor"/>.
            </summary>
            <param name="color"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorGradient">
            <summary>
            Represents a gradient with multiple color stops.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.ColorGradient.Stops">
            <summary>
            The color stops that define the gradient.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Color},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new color gradient with the defined colors and stops.
            </summary>
            <param name="colors">The colors with the gradient.</param>
            <param name="stops">The gradient stops where the colors are used.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new color gradient with only two colors, the first at the start, and the second at the end.
            </summary>
            <param name="startingColor">The starting color of the gradient.</param>
            <param name="endingColor">The ending color of the gradient.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(Microsoft.Xna.Framework.Color[])">
            <summary>
            Creates a new color gradient, evenly spacing them out. At least one color must be provided.
            </summary>
            <param name="colors">The colors to create a gradient from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.ToColoredString(System.String)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object using the current gradient.
            </summary>
            <param name="text">The text to use for the colored string.</param>
            <returns>A new colored string object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.Lerp(System.Single)">
            <summary>
            Returns a color from this gradient at the specified lerp value.
            </summary>
            <param name="amount">The lerp amount.</param>
            <returns>A color.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorGradientStop">
            <summary>
            A gradient stop. Defines a color and where it is located within the gradient.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorGradientStop.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorGradientStop.Stop">
            <summary>
            The color stop in the gradiant this applies to.
            </summary>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Helpers for strings.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,System.Windows.HorizontalAlignment,System.Int32)">
            <summary>
            Aligns a string given a total character width and alignment style. Fills in the extra space with the space character.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,System.Windows.HorizontalAlignment,System.Int32,System.Char)">
            <summary>
            Aligns a string given a total character width and alignment style.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <param name="fillCharacter">The character to use to fill in the extra spaces after alignment.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateColored(System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground and background, setting the ignore properties if needed.
            </summary>
            <param name="value">The current string.</param>
            <param name="foreground">The foreground color. If null, <see cref="F:SadConsole.ColoredString.IgnoreForeground"/> will be set.</param>
            <param name="background">The background color. If null, <see cref="F:SadConsole.ColoredString.IgnoreBackground"/> will be set.</param>
            <param name="spriteEffect">The background color. If null, <see cref="F:SadConsole.ColoredString.IgnoreEffect"/> will be set.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient, background gradient, and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <param name="startingBackground">The starting background color to blend.</param>
            <param name="endingBackground">The ending background color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.ToBool(System.String)">
            <summary>
            Converts a string to a boolean when it is "0", "1", "true", or "false".
            </summary>
            <param name="item">The string to convert</param>
            <returns>The converted boolean value, otherwise false.</returns>
        </member>
    </members>
</doc>
